// Clearfix
@mixin clearfix($reset: false) {
  &:before,
  &:after {
    display: table;
    content: " ";
  }

  &:after {
    clear: both;
  }

  @if $reset != false {
    &:before, &:after {
      display: none;
    }
  }
}


// Do or don't use calc

@mixin ifCalc() {
  @if $useCalc == true {
    @content;
  }
}


// Do or don't use modernizr depending on variable setting

@mixin ifModernizr($modernizr: '.csscalc') {
  @if $useModernizr == false {
    @include ifCalc {
      @content;
    }
  }

  @if $useModernizr == true {
    @at-root {
      #{$modernizr} & {
        @include ifCalc {
          @content
        }
      }
    }
  }
}


// Do or don't use breakpoint depending on width

@mixin ifBreakpoint($width) {
  // Don't use media query when width = 0
  @if $width == 0 {
    @content;
  }

  // Set width in breakpoints
  @if $width != 0 {
    @media (min-width: $width) {
      @content;
    }
  }
}


@mixin setSpan($breakpoint, $width, $container, $columns, $columnWidth, $columnMargin, $bottom, $omega, $float) {
  @include ifBreakpoint($breakpoint) {
    float: $float;

    @if $useFallback == true {
      margin-left: calculatePercentageGutter($container);
      width: calculatePercentageWidth($columns, $container);

      @if $bottom != false {
        margin-bottom: calculatePercentageGutter($container);
      }
    }

    @include ifModernizr() {
      width: $columnWidth;
      margin-left: $columnMargin;

      @if $bottom != false {
        margin-bottom: $columnMargin;
      }
    }

    @if $omega != false {
      // Reset all previous NTH values
      &:nth-child(n) {
        clear: none;
      }

      &:nth-child(n) {
        @if $useFallback == true {
          margin-left: calculatePercentageGutter($container);
        }
        @include ifModernizr() {
          margin-left: $columnMargin;
        }
      }

      &:nth-child(#{$omega}n+1) {
        @if $useFallback == true {
          margin-left: 0;
        }
        @include ifModernizr() {
          margin-left: 0;
        }
        clear: left;
      }

      // No margin for first child
      &:first-child:nth-child(n) {
        margin-left: 0;
      }
    }

    // No margin for last child
    &:first-child {
      margin-left: 0;
    }
  }
}



@mixin fromTo($previousGutter, $previousWidth, $from, $to, $values, $span, $size, $starting, $stopping) {
  // Get values
  $spacing: map-get($values, gutter);
  $width: map-get($values, width);

  // Set starting breakpoint
  @if $from == false {
    $starting: 0;
  }
  @else {
    @if $from > $previousWidth and $from < $width {
      $starting: $from;
    }
    @else if $from == $width {
      $starting: $width;
    }
      // Reset
    @else if $from == $starting {
      $starting: $width
    }
  }

  // Set stopping breakpoint
  @if $to != false {
    @if $to <= $width {
      $stopping: true;
    }
  }

  @if $size != false {
    $spacing: map-get($values, gutter) * $size;
  }

  // Get values
  $columns: nth($span, 1);
  $container: getcontainer($span);
  $amount: $container / $columns;
  $gutter: ($amount - 1) * $spacing;
  $columnWidth: calc((100% - #{$gutter}) / #{$amount});
  $columnMargin: calc(#{$spacing});

  // If $from is not an existing breakpoint give it it's own media querie
  @if $from != false and $from == $starting and $from != $previousWidth and $from != $width {
    @content;
  }

  // Only run between starting and stopping breakpoints
  @if $starting != false and $stopping != true {
    @content;
  }

  @if $previousWidth != $width {
    $previousWidth: map-get($values, width);
  }

  @if $previousGutter != $gutter {
    $previousGutter: map-get($values, gutter);
  }
}







@mixin span($span: $columns of $container, $fromto: false to false, $size: 1, $bottom: false, $omega: false, $float: left) {

  // Set default values for starting and stopping
  $starting: false;
  $stopping: false;
  $previousWidth: 0;
  $previousGutter: false;

  // Fromto
  $from: getFrom($fromto);
  $to: getTo($fromto);

  // Largest values
  $largestWidth: largestWidth();
  $largestGutter: largestGutter();

  // Run through each breakpoint
  @each $breakpoint, $values in $gridder-breakpoints {

    // Get values
    $spacing: map-get($values, gutter);
    $width: map-get($values, width);

    // Set starting breakpoint
    @if $from == false {
      $starting: 0;
    }
    @else {
      @if $from > $previousWidth and $from < $width {
        $starting: $from;
      }
      @else if $from == $width {
        $starting: $width;
      }
      @else if($width == $largestWidth and $from > $largestWidth) {
        $starting: $from;
      }
      // Reset
      @else if $from == $starting {
        $starting: $width
      }
    }

    // Set stopping breakpoint
    @if $to != false {
      @if $to <= $width {
        $stopping: true;
      }
    }

    @if $size != false {
      $spacing: map-get($values, gutter) * $size;
    }

    // Get values
    $columns: nth($span, 1);
    $container: getcontainer($span);
    $amount: $container / $columns;
    $gutter: ($amount - 1) * $spacing;
    $columnWidth: calc((100% - #{$gutter}) / #{$amount});
    $columnMargin: calc(#{$spacing});

    // If $from is not an existing breakpoint give it it's own media querie
    @if $from != false and $from == $starting and $from != $previousWidth and $from != $width {
      @if $size != false {
        $previousGutter: $spacing;
      }

      @if $from > $largestWidth {
        $previousGutter: $largestGutter;
      }

      // Set margin to previous gutter amount
      $columnMargin: calc(#{$previousGutter});
      $columnWidth: calc((100% - #{($amount - 1) * $previousGutter}) / #{$amount});

      // Set span
      @include setSpan($starting, $width, $container, $columns, $columnWidth, $columnMargin, $bottom, $omega, $float);

      // Reset for default breakpoints
      $columnWidth: calc((100% - #{$gutter}) / #{$amount});
      $columnMargin: calc(#{$spacing});
    }

    // Only run between starting and stopping breakpoints
    @else if $starting != false and $stopping != true {
      @include setSpan($starting, $width, $container, $columns, $columnWidth, $columnMargin, $bottom, $omega, $float);
    }

    @if $previousWidth != $width {
      $previousWidth: map-get($values, width);
    }

    @if $previousGutter != $gutter {
      $previousGutter: map-get($values, gutter);
    }

  }

  // Reset
  $starting: false !global;
  $stopping: false !global;
  $previousWidth: false !global;
  $previousGutter: false !global;
}


@mixin gallery($span: $columns of $container, $fromto: false to false, $size: false, $bottom: true, $float: left) {

  // Variables
  $columns: nth($span, 1);
  $container: getcontainer($span);
  $omega: ($container / $columns);

  // Span columns
  @include span($span, $fromto, $size, $bottom, $omega);
}


@mixin container($flexbox: false) {

  // Set default styling
  @include clearfix;
  margin-left: auto;
  margin-right: auto;
  max-width: $gridder-maxwidth;

  // Run through each breakpoint
  @each $breakpoint, $values in $gridder-breakpoints {
    @include ifBreakpoint(map-get($values, width)) {
      padding-left: map-get($values, gutter);
      padding-right: map-get($values, gutter);
    }
  }

  // Flexbox
  @if $flexbox != false {
    @include ifModernizr('.flexbox.flexwrap') {
      display: flex;
      flex-wrap: wrap;

      // Hide psuedo elements
      // They are in the way for wrapping flex items on certain browsers
      &:before, &:after {
        display: none;
      }
    }
  }
}



@mixin shift($shift: $columns of $container) {

  // Variables
  $columns: nth($shift, 1);
  $container: getcontainer($shift);
  $negative: false;

  @if $columns < 0 {
    $columns: $columns * -1;
    $negative: true;
  }

  // Run through each breakpoint
  @each $breakpoint, $values in $gridder-breakpoints {

    // Calculations
    $amount: $container / $columns;
    $totalgutter: ($amount - 1) * map-get($values, gutter);

    @include ifBreakpoint(map-get($values, width)) {
      position: relative;

      // Use fallback?
      @if $useFallback == true {
        $marginLeft: $columns * calculatePercentageWidth(1, $container) + $columns * calculatePercentageGutter($container);
        @if $negative == true {
          $marginLeft: -($columns * calculatePercentageWidth(1, $container) + ($columns - 1) * calculatePercentageGutter($container));
        }
        left: $marginLeft;
      }

      // Use modernizr?
      @include ifModernizr {
        $marginLeft: calc(((100% - #{$totalgutter}) / #{$amount}) + #{map-get($values, gutter)});
        // Negative number?
        @if $negative == true {
          $marginLeft: calc(((-100% - #{map-get($values, gutter)}) / #{$amount}));
        }

        left: $marginLeft;
      }
    }
  }
}


@mixin setSpacer($breakpoint, $side, $skip, $type, $spacing) {
  @include ifBreakpoint($breakpoint) {
    @if ($side == all or $side == vertical or $side == top) and $skip != top {
      #{$type}-top: $spacing;
    }

    // Right
    @if ($side == all or $side == horizontal or $side == right) and $skip != right {
      #{$type}-right: $spacing;
    }

    // Bottom
    @if ($side == all or $side == vertical or $side == bottom) and $skip != bottom {
      #{$type}-bottom: $spacing;
    }

    // Left
    @if ($side == all or $side == horizontal or $side == left) and $skip != left {
      #{$type}-left: $spacing;
    }
  }
}

// Spacing mixin
// @TODO: nog niet afgebouwd!

@mixin spacing($sides: all minus none, $type: padding, $size: 1, $fromto: false to false) {

  // Set default values for starting and stopping
  $starting: false;
  $stopping: false;
  $previousWidth: 0;
  $previousGutter: false;

  // Fromto
  $from: getFrom($fromto);
  $to: getTo($fromto);

  // Run through each breakpoint
  @each $breakpoint, $values in $gridder-breakpoints {

    // Get values
    $side: nth($sides, 1);
    $skip: getsides($sides);
    $spacing: map-get($values, gutter) * $size;
    $width: map-get($values, width);

    // Set starting breakpoint
    @if $from == false {
      $starting: 0;
    }
    @else {
      @if $from > $previousWidth and $from < $width {
        $starting: $from;
      }
      @else if $from == $width {
        $starting: $width;
      }
        // Reset
      @else if $from == $starting {
        $starting: $width
      }
    }

    // Set stopping breakpoint
    @if $to != false {
      @if $to <= $width {
        $stopping: true;
      }
    }

    // If $from is not an existing breakpoint give it it's own media querie
    @if $from != false and $from == $starting and $from != $previousWidth and $from != $width {

      @if $size != false {
        $previousGutter: $spacing;
      }

      // Set span
      @include setSpacer($from, $side, $skip, $type, $previousGutter);
    }

    // Only run between starting and stopping breakpoints
    @if $starting != false and $stopping != true {
      @include setSpacer(map-get($values, width), $side, $skip, $type, $spacing);
    }

    @if $previousWidth != $width {
      $previousWidth: map-get($values, width);
    }

    @if $previousGutter != $spacing {
      $previousGutter: map-get($values, gutter);
    }
  }

  // Reset
  $starting: false !global;
  $stopping: false !global;
  $previousWidth: false !global;
  $previousGutter: false !global;
}


// Puller

@mixin pullback($sides: all minus none, $size: 1) {

  // Run through breakpoints
  @each $breakpoint, $values in $gridder-breakpoints {

    // Get values
    $side: nth($sides, 1);
    $skip: getsides($sides);
    $gutter: map-get($values, gutter) * $size;
    $width: map-get($values, width);

    // Apply styling to different breakpoints
    @include ifBreakpoint($width) {
      @if ($side == all or $side == vertical or $side == top) and $skip != top  {
        margin-top: -($gutter);
      }

      // Right
      @if ($side == all or $side == horizontal or $side == right) and $skip != right  {
        margin-right: -($gutter);
      }

      // Bottom
      @if ($side == all or $side == vertical or $side == bottom) and $skip != bottom {
        margin-bottom: -($gutter);
      }

      // Left
      @if ($side == all or $side == horizontal or $side == left) and $skip != left  {
        margin-left: -($gutter);
      }
    }
  }
}
